type InvariantConfig = struct {
  admin: actor_id,
  protocol_fee: Percentage,
};

type Percentage = struct {
  u128,
};

type FeeTier = struct {
  fee: Percentage,
  tick_spacing: u16,
};

type PoolKey = struct {
  token_x: actor_id,
  token_y: actor_id,
  fee_tier: FeeTier,
};

type TokenAmount = struct {
  u256,
};

type SqrtPrice = struct {
  u128,
};

type Liquidity = struct {
  u256,
};

type Position = struct {
  pool_key: PoolKey,
  liquidity: Liquidity,
  lower_tick_index: i32,
  upper_tick_index: i32,
  fee_growth_inside_x: FeeGrowth,
  fee_growth_inside_y: FeeGrowth,
  last_block_number: u64,
  tokens_owed_x: TokenAmount,
  tokens_owed_y: TokenAmount,
};

type FeeGrowth = struct {
  u128,
};

type CalculateSwapResult = struct {
  amount_in: TokenAmount,
  amount_out: TokenAmount,
  start_sqrt_price: SqrtPrice,
  target_sqrt_price: SqrtPrice,
  fee: TokenAmount,
  pool: Pool,
  ticks: vec Tick,
};

type Pool = struct {
  liquidity: Liquidity,
  sqrt_price: SqrtPrice,
  current_tick_index: i32,
  fee_growth_global_x: FeeGrowth,
  fee_growth_global_y: FeeGrowth,
  fee_protocol_token_x: TokenAmount,
  fee_protocol_token_y: TokenAmount,
  start_timestamp: u64,
  last_timestamp: u64,
  fee_receiver: actor_id,
};

type Tick = struct {
  index: i32,
  sign: bool,
  liquidity_change: Liquidity,
  liquidity_gross: Liquidity,
  sqrt_price: SqrtPrice,
  fee_growth_outside_x: FeeGrowth,
  fee_growth_outside_y: FeeGrowth,
  seconds_outside: u64,
};

type SwapHop = struct {
  pool_key: PoolKey,
  x_to_y: bool,
};

type InvariantError = enum {
  NotAdmin,
  NotFeeReceiver,
  PoolAlreadyExist,
  PoolNotFound,
  TickAlreadyExist,
  InvalidTickIndexOrTickSpacing,
  PositionNotFound,
  TickNotFound,
  FeeTierNotFound,
  PoolKeyNotFound,
  AmountIsZero,
  WrongLimit,
  PriceLimitReached,
  NoGainSwap,
  InvalidTickSpacing,
  FeeTierAlreadyExist,
  PoolKeyAlreadyExist,
  UnauthorizedFeeReceiver,
  ZeroLiquidity,
  RecoverableTransferError,
  UnrecoverableTransferError,
  TransferError,
  TokensAreSame,
  AmountUnderMinimumAmountOut,
  InvalidFee,
  NotEmptyTickDeinitialization,
  InvalidInitTick,
  InvalidInitSqrtPrice,
  NotEnoughGasToExecute,
  TickLimitReached,
  InvalidTickIndex,
  NoBalanceForTheToken,
  FailedToChangeTokenBalance,
  ReplyHandlingFailed,
};

type LiquidityTick = struct {
  index: i32,
  liquidity_change: Liquidity,
  sign: bool,
};

type PositionTick = struct {
  index: i32,
  fee_growth_outside_x: FeeGrowth,
  fee_growth_outside_y: FeeGrowth,
  seconds_outside: u64,
};

type QuoteResult = struct {
  amount_in: TokenAmount,
  amount_out: TokenAmount,
  target_sqrt_price: SqrtPrice,
  ticks: vec Tick,
};

constructor {
  New : (config: InvariantConfig);
};

service Service {
  AddFeeTier : (fee_tier: FeeTier) -> FeeTier;
  ChangeFeeReceiver : (pool_key: PoolKey, fee_receiver: actor_id) -> null;
  ChangeProtocolFee : (protocol_fee: Percentage) -> Percentage;
  ClaimFee : (index: u32) -> struct { TokenAmount, TokenAmount };
  CreatePool : (token_x: actor_id, token_y: actor_id, fee_tier: FeeTier, init_sqrt_price: SqrtPrice, init_tick: i32) -> null;
  CreatePosition : (pool_key: PoolKey, lower_tick: i32, upper_tick: i32, liquidity_delta: Liquidity, slippage_limit_lower: SqrtPrice, slippage_limit_upper: SqrtPrice) -> Position;
  DepositSingleToken : (token: actor_id, amount: TokenAmount) -> TokenAmount;
  DepositTokenPair : (token_x: struct { actor_id, TokenAmount }, token_y: struct { actor_id, TokenAmount }) -> struct { TokenAmount, TokenAmount };
  RemoveFeeTier : (fee_tier: FeeTier) -> FeeTier;
  RemovePosition : (index: u32) -> struct { TokenAmount, TokenAmount };
  Swap : (pool_key: PoolKey, x_to_y: bool, amount: TokenAmount, by_amount_in: bool, sqrt_price_limit: SqrtPrice) -> CalculateSwapResult;
  SwapRoute : (amount_in: TokenAmount, expected_amount_out: TokenAmount, slippage: Percentage, swaps: vec SwapHop) -> TokenAmount;
  TransferPosition : (index: u32, receiver: actor_id) -> null;
  WithdrawProtocolFee : (pool_key: PoolKey) -> null;
  WithdrawSingleToken : (token: actor_id, amount: opt TokenAmount) -> TokenAmount;
  WithdrawTokenPair : (token_x: struct { actor_id, opt TokenAmount }, token_y: struct { actor_id, opt TokenAmount }) -> struct { TokenAmount, TokenAmount };
  query FeeTierExists : (fee_tier: FeeTier) -> bool;
  query GetAllPoolsForPair : (token0: actor_id, token1: actor_id) -> result (vec struct { FeeTier, Pool }, InvariantError);
  query GetAllPositions : (owner_id: actor_id) -> vec Position;
  query GetFeeTiers : () -> vec FeeTier;
  query GetLiquidityTicks : (pool_key: PoolKey, tickmap: vec i32) -> result (vec LiquidityTick, InvariantError);
  query GetLiquidityTicksAmount : (pool_key: PoolKey) -> u32;
  query GetPool : (token_x: actor_id, token_y: actor_id, fee_tier: FeeTier) -> result (Pool, InvariantError);
  query GetPoolKeys : (size: u16, offset: u16) -> struct { vec PoolKey, u16 };
  query GetPosition : (owner_id: actor_id, index: u32) -> result (Position, InvariantError);
  query GetPositionTicks : (owner: actor_id, offset: u32) -> vec PositionTick;
  query GetPositions : (owner_id: actor_id, size: u32, offset: u32) -> result (struct { vec struct { Pool, vec Position }, u32 }, InvariantError);
  query GetProtocolFee : () -> Percentage;
  query GetTick : (key: PoolKey, index: i32) -> result (Tick, InvariantError);
  query GetTickmap : (pool_key: PoolKey) -> vec struct { u16, u64 };
  query GetUserBalances : (user: actor_id) -> vec struct { actor_id, TokenAmount };
  query GetUserPositionAmount : (owner_id: actor_id) -> u32;
  query IsTickInitialized : (key: PoolKey, index: i32) -> bool;
  query Quote : (pool_key: PoolKey, x_to_y: bool, amount: TokenAmount, by_amount_in: bool, sqrt_price_limit: SqrtPrice) -> result (QuoteResult, InvariantError);
  query QuoteRoute : (amount_in: TokenAmount, swaps: vec SwapHop) -> result (TokenAmount, InvariantError);

  events {
    PositionCreatedEvent: struct { timestamp: u64, address: actor_id, pool_key: PoolKey, liquidity_delta: Liquidity, lower_tick: i32, upper_tick: i32, current_sqrt_price: SqrtPrice };
    PositionRemovedEvent: struct { timestamp: u64, address: actor_id, pool_key: PoolKey, liquidity: Liquidity, lower_tick_index: i32, upper_tick_index: i32, sqrt_price: SqrtPrice };
    CrossTickEvent: struct { timestamp: u64, address: actor_id, pool_key: PoolKey, indexes: vec i32 };
    SwapEvent: struct { timestamp: u64, address: actor_id, pool_key: PoolKey, amount_in: TokenAmount, amount_out: TokenAmount, fee: TokenAmount, start_sqrt_price: SqrtPrice, target_sqrt_price: SqrtPrice, x_to_y: bool };
  }
};

